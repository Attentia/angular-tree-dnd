{"version":3,"sources":["ng-tree-dnd.js"],"names":["window","TreeDnD","IsUndefinedOrNull","val","angular","isUndefined","IsDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","new_elem","isFunction","html","append","compileReplace","replaceWith","$element","$type","$class","addClass","replace","_enabledDragDrop","dragEnabled","dropEnabled","$modelValue","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","getScopeNode","getData","getElementChilds","querySelector","$nodes_class","treeDndNodes","$injector","$timeout","$http","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","controller","$scope","$attrs","indent","indent_plus","indent_unit","$tree_class","primary_key","colDefinitions","$globals","treeData","tree_nodes","sycning","copy","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","__expanded__","getHash","__parent__","__uid__","accept","dragInfo","moveTo","isChanged","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","Math","random","__selected__","clone","_this","this","remove","parent","splice","__index__","add","pos","push","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","__parent_real__","getNode","index","_hash","getScope","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","tElement","tAttrs","$_Template","_element","trim","_fnInitFilter","_fnInitOrderBy","_fnGetControl","_fnInitDrag","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","isArray","expandLevel","__index_real__","__level__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","old","indexOf","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","templateUrl","getPath","cache","success","data","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","_fnget","name","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_options","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","prepend","_fnDragEnd","_isTable","_status","$$apply","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.4\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n\n    window.TreeDnD = {\n        IsUndefinedOrNull: function (val) {\n            return angular.isUndefined(val) || val === null;\n        },\n\n        IsDefined: function (val) {\n            return !(angular.isUndefined(val) || val === null);\n        }\n    }\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\n        '$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        }\n    ).directive(\n    'compile', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                /*\n                                 * Compile creates a linking function\n                                 * that can be used with any scope.\n                                 */\n                                var link = $compile(new_val);\n                                /*\n                                 * Executing the linking function\n                                 * creates a new element.\n                                 */\n                                var new_elem = link(scope);\n                                // Which we can then append to our DOM element.\n                                if(angular.isFunction(element.empty)){\n                                    element.empty()\n                                }else{\n                                    element.html('');\n                                }\n\n                                element.append(new_elem)\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n)\n    .directive(\n    'compileReplace', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                /*\n                                 * Compile creates a linking function\n                                 * that can be used with any scope.\n                                 */\n                                var link = $compile(new_val);\n                                /*\n                                 * Executing the linking function\n                                 * creates a new element.\n                                 */\n                                var new_elem = link(scope);\n\n                                element.replaceWith(new_elem)\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n).directive(\n    'treeDndNodeHandle', function () {\n        return {\n            restrict: 'A',\n            scope:    true,\n            link:     function (scope, element, attrs) {\n                scope.$element = element;\n                scope.$type = 'TreeDnDNodeHandle';\n                if (scope.$class.handle) {\n                    element.addClass(scope.$class.handle);\n                }\n            }\n        };\n    }\n).directive(\n    'treeDndNode', function () {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element, attrs) {\n                var _enabledDragDrop = (typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean');\n                scope.$modelValue = null;\n                scope.$icon_class = '';\n                scope.$node_class = '';\n\n                if (scope.$class.node) {\n                    element.addClass(scope.$class.node);\n                    scope.$node_class = scope.$class.node;\n                }\n\n                scope.$watch(\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\n                        if (_enabledDragDrop) {\n                            scope.setScope(scope, newValue);\n                        }\n                        scope.$modelValue = newValue;\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\n                    }, true\n                );\n\n                if (_enabledDragDrop) {\n\n                    scope.$element = element;\n                    scope.$type = 'TreeDnDNode';\n\n                    scope.getScopeNode = function () {\n                        return scope;\n                    };\n\n                    scope.getData = function () {\n                        return scope.$modelValue;\n                    };\n\n                    scope.getElementChilds = function () {\n                        return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\n                    };\n                }\n            }\n        };\n    }\n).directive(\n    'treeDndNodes', function () {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element, attrs) {\n                scope.nodes = [];\n                scope.$nodes_class = '';\n                scope.$type = 'TreeDnDNodes';\n                scope.$element = element;\n                scope.getScopeNode = null;\n\n                scope.$watch(\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\n                        scope.nodes = newValue;\n                    }, true\n                );\n\n                if (scope.$class.nodes) {\n                    element.addClass(scope.$class.nodes);\n                    scope.$nodes_class = scope.$class.nodes;\n                }\n            }\n        };\n    }\n).directive(\n    'treeDnd', [\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\n            return {\n                restrict:   'E',\n                scope:      true,\n                replace:    true,\n                controller: [\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                        $scope.indent = 20;\n                        $scope.indent_plus = 15;\n                        $scope.indent_unit = 'px';\n                        $scope.$tree_class = 'table';\n                        $scope.primary_key = '__uid__';\n\n\n                        $scope.$type = 'TreeDnD';\n                        // $scope.enabledFilter = null;\n                        $scope.colDefinitions = [];\n                        $scope.$globals = {};\n                        $scope.$class = {};\n\n                        $scope.treeData = [];\n                        $scope.tree_nodes = [];\n\n                        $scope.sycning = false;\n\n                        $scope.$class = angular.copy($TreeDnDClass);\n                        angular.extend(\n                            $scope.$class.icon, {\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n                            }\n                        );\n\n                        $scope.for_all_descendants = function (node, fn) {\n                            if (angular.isFunction(fn)) {\n                                var _i, _len, _nodes;\n\n                                if (fn(node)) {\n                                    return false;\n                                }\n                                _nodes = node.__children__;\n                                _len = _nodes.length;\n                                for (_i = 0; _i < _len; _i++) {\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\n                                        return false;\n                                    }\n                                }\n                            }\n                            return true;\n                        };\n\n                        $scope.getLastDescendant = function (node) {\n                            var last_child, n;\n                            if (!node) {\n                                node = $scope.tree ? $scope.tree.selected_node : false;\n                            }\n                            if(node === false){\n                                return false;\n                            }\n                            n = node.__children__.length;\n                            if (n === 0) {\n                                return node;\n                            } else {\n                                last_child = node.__children__[n - 1];\n                                return $scope.getLastDescendant(last_child);\n                            }\n                        };\n\n                        $scope.getElementChilds = function () {\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n                        };\n\n                        $scope.onClick = function (node) {\n                            if (window.TreeDnD.IsDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                                // We want to detach from Angular's digest cycle so we can\n                                // independently measure the time for one cycle.\n                                setTimeout(\n                                    function () {\n                                        $scope.tree.on_click(node);\n                                    }, 0\n                                );\n                            }\n                        };\n\n                        $scope.onSelect = function (node) {\n                            if (window.TreeDnD.IsDefined($scope.tree)) {\n                                if (node !== $scope.tree.selected_node) {\n                                    $scope.tree.select_node(node);\n                                }\n\n                                if (angular.isFunction($scope.tree.on_select)) {\n                                    setTimeout(\n                                        function () {\n                                            $scope.tree.on_select(node);\n                                        }, 0\n                                    );\n                                }\n                            }\n                        };\n\n                        var passedExpand, _clone;\n                        $scope.toggleExpand = function (node, fnCallback) {\n                            passedExpand = true;\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\n                                passedExpand = false;\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\n                                passedExpand = false;\n                            }\n\n                            if (passedExpand) {\n                                if (node.__children__.length > 0) {\n                                    node.__expanded__ = !node.__expanded__;\n                                }\n                            }\n                        };\n\n                        $scope.getHash = function (node) {\n                            if ($scope.primary_key === '__uid__') {\n                                return '#' + node.__parent__ + '#' + node.__uid__;\n                            } else {\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n                            }\n                        };\n\n                        $scope.$callbacks = {\n                            for_all_descendants: $scope.for_all_descendants,\n                            expand:              function (node) {\n                                return true;\n                            },\n                            accept:              function (dragInfo, moveTo, isChanged) {\n                                return $scope.dropEnabled === true;\n                            },\n                            calsIndent:          function (level, skipUnit, skipEdge) {\n                                var unit = 0,\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\n                                if (!skipUnit) {\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                                }\n\n                                if (level - 1 < 1) {\n                                    return edge + unit;\n                                } else {\n                                    return $scope.indent * (level - 1) + edge + unit;\n                                }\n                            },\n                            droppable:           function () {\n                                return $scope.dropEnabled === true;\n                            },\n                            draggable:           function () {\n                                return $scope.dragEnabled === true;\n                            },\n                            beforeDrop:          function (event) {\n                                return true;\n                            },\n                            changeKey:           function (node) {\n                                var _key = node.__uid__;\n                                node.__uid__ = Math.random();\n                                if (node.__selected__) {\n                                    delete(node.__selected__);\n                                }\n\n                                if ($scope.primary_key !== '__uid__') {\n                                    _key = '' + node[$scope.primary_key];\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                                    node[$scope.primary_key] = _key;\n                                }\n                                // delete(node.__hashKey__);\n                            },\n                            clone:               function (node, _this) {\n                                _clone = angular.copy(node);\n                                this.for_all_descendants(_clone, this.changeKey);\n                                return _clone;\n                            },\n                            remove:              function (node, parent, _this) {\n                                return parent.splice(node.__index__, 1)[0];\n                            },\n                            add:                 function (node, pos, parent, _this) {\n                                if (parent) {\n                                    if (parent.length > -1) {\n                                        if (pos > -1) {\n                                            parent.splice(pos, 0, node);\n                                        } else {\n                                            // todo If children need load crazy\n                                            parent.push(node);\n                                        }\n                                    } else {\n                                        parent.push(node);\n                                    }\n                                }\n                            }\n                        };\n\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\n                            $scope.placeElm = null;\n                            //                            $scope.dragBorder = 30;\n                            $scope.dragEnabled = null;\n                            $scope.dropEnabled = null;\n                            $scope.horizontal = null;\n\n                            if ($attrs.enableDrag) {\n\n                                $scope.dragDelay = 0;\n                                $scope.enabledMove = true;\n                                $scope.statusMove = true;\n                                $scope.enabledHotkey = false;\n                                $scope.enabledCollapse = null;\n                                $scope.statusElm = null;\n                                $scope.dragging = null;\n\n                                angular.extend(\n                                    $scope.$callbacks, {\n                                        beforeDrag: function (scopeDrag) {\n                                            return true;\n                                        },\n                                        dragStop:   function (event, skiped) {},\n                                        dropped:    function (info, pass, isMove) {\n                                            if (!info) {\n                                                return null;\n                                            }\n\n                                            if (!info.changed && isMove) {\n                                                return false;\n                                            }\n                                            var _node = info.node,\n                                                _nodeAdd = null,\n                                                _move = info.move,\n                                                _parent = null,\n                                                _parentRemove = (info.parent || info.drag.treeData),\n                                                _parentAdd = (_move.parent || info.target.treeData);\n\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                                if (isMove) {\n                                                    _parent = _parentRemove;\n                                                    if (window.TreeDnD.IsDefined(_parent.__children__)) {\n                                                        _parent = _parent.__children__;\n                                                    }\n\n                                                    _nodeAdd = info.drag.$callbacks.remove(\n                                                        _node,\n                                                        _parent,\n                                                        info.drag.$callbacks\n                                                    );\n                                                } else {\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                                }\n\n                                                // if node dragging change index in sample node parent\n                                                // and index node decrement\n                                                if (isMove &&\n                                                    info.drag === info.target &&\n                                                    _parentRemove === _parentAdd &&\n                                                    _move.pos >= info.node.__index__) {\n                                                    _move.pos--;\n                                                }\n\n                                                _parent = _parentAdd;\n                                                if (_parent.__children__) {\n                                                    _parent = _parent.__children__;\n                                                }\n\n                                                info.target.$callbacks.add(\n                                                    _nodeAdd,\n                                                    _move.pos,\n                                                    _parent,\n                                                    info.drag.$callbacks\n                                                );\n\n                                                return true;\n                                            }\n\n                                            return false;\n                                        },\n                                        dragStart:  function (event) {},\n                                        dragMove:   function (event) {}\n                                    }\n                                );\n\n                                $scope.setDragging = function (dragInfo) {\n                                    $scope.dragging = dragInfo;\n                                };\n\n                                $scope.enableMove = function (val) {\n                                    if (typeof val === \"boolean\") {\n                                        $scope.enabledMove = val;\n                                    } else {\n                                        $scope.enabledMove = true;\n                                    }\n                                };\n\n                                if ($attrs.enableStatus) {\n                                    $scope.enabledStatus = false;\n\n                                    $scope.hideStatus = function () {\n                                        if ($scope.statusElm) {\n                                            $scope.statusElm.addClass($scope.$class.hidden);\n                                        }\n                                    };\n\n                                    $scope.refreshStatus = function () {\n                                        if (!$scope.dragging) {\n                                            return;\n                                        }\n\n                                        if ($scope.enabledStatus) {\n                                            var statusElmOld = $scope.statusElm;\n                                            if ($scope.enabledMove) {\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                                            } else {\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                                            }\n\n                                            if (statusElmOld !== $scope.statusElm) {\n                                                if (statusElmOld) {\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                                    statusElmOld.remove();\n                                                }\n                                                $document.find('body').append($scope.statusElm);\n\n                                            }\n\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\n                                        }\n                                    };\n\n                                    $scope.setPositionStatus = function (e) {\n                                        if ($scope.statusElm) {\n                                            $scope.statusElm.css(\n                                                {\n                                                    'left':    e.pageX + 10 + 'px',\n                                                    'top':     e.pageY + 15 + 'px',\n                                                    'z-index': 9999\n                                                }\n                                            );\n                                            $scope.statusElm.addClass($scope.$class.status);\n                                        }\n                                    };\n                                }\n                            }\n\n                            $scope.targeting = false;\n\n                            $scope.getPrevSibling = function (node) {\n                                if (node && node.__index__ > 0) {\n                                    var _parent, _index = node.__index__ - 1;\n\n                                    if (window.TreeDnD.IsDefined(node.__parent_real__)) {\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\n                                        return _parent.__children__[_index];\n                                    }\n                                    return $scope.treeData[_index];\n\n                                }\n                                return null;\n                            };\n\n                            $scope.getNode = function (index) {\n                                if (window.TreeDnD.IsUndefinedOrNull(index)) {\n                                    return null;\n                                }\n                                return $scope.tree_nodes[index];\n                            };\n\n                            $scope.setScope = function (scope, node) {\n                                var _hash = $scope.getHash(node);\n                                if ($scope.$globals[_hash] !== scope) {\n                                    $scope.$globals[_hash] = scope;\n                                }\n                            };\n\n                            $scope.getScope = function (node) {\n                                if (node) {\n                                    return $scope.$globals[$scope.getHash(node)];\n                                }\n                                return $scope;\n\n                            };\n\n                            $scope.initPlace = function (element, dragElm) {\n\n                                var tagName = null,\n                                    isTable = false;\n\n                                if (element) {\n                                    tagName = element.prop('tagName').toLowerCase();\n                                    isTable = (tagName === 'tr' || tagName === 'td');\n                                } else {\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\n                                }\n\n                                if (!$scope.placeElm) {\n\n                                    if (isTable) {\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n                                        var _len_down = $scope.colDefinitions.length;\n                                        $scope.placeElm.append(\n                                            angular.element($window.document.createElement('td'))\n                                                .addClass($scope.$class.empty)\n                                                .addClass('indented')\n                                                .addClass($scope.$class.place)\n                                        );\n                                        while (_len_down-- > 0) {\n                                            $scope.placeElm.append(\n                                                angular.element($window.document.createElement('td'))\n                                                    .addClass($scope.$class.empty)\n                                                    .addClass($scope.$class.place)\n                                            );\n                                        }\n                                    } else {\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                                            .addClass($scope.$class.empty)\n                                            .addClass($scope.$class.place);\n                                    }\n\n                                }\n\n                                if (dragElm) {\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                                }\n\n                                if (element) {\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                                } else {\n                                    $scope.getElementChilds().append($scope.placeElm);\n                                }\n\n                                return $scope.placeElm;\n                            };\n\n                            $scope.hidePlace = function () {\n                                if ($scope.placeElm) {\n                                    $scope.placeElm.addClass($scope.$class.hidden);\n                                }\n                            };\n\n                            $scope.showPlace = function () {\n                                if ($scope.placeElm) {\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\n                                }\n                            };\n\n                            $scope.getScopeTree = function () {\n                                return $scope;\n                            };\n\n                        }\n\n                        $scope.$safeApply = function (fn) {\n                            var phase = this.$root.$$phase;\n                            if (phase === '$apply' || phase === '$digest') {\n                                if (fn && (typeof(fn) === 'function')) {\n                                    fn();\n                                }\n                            } else {\n                                this.$apply(fn);\n                            }\n                        };\n\n                    }],\n                compile:    function compile(tElement, tAttrs) {\n\n                    var $_Template = '',\n                        _element = tElement.html().trim();\n                    if (_element.length > 0) {\n                        $_Template = _element;\n                        tElement.html('');\n                    }\n\n                    return function fnPost(scope, element, attrs) {\n                        var getExpandOn = function () {\n                                if (scope.treeData && scope.treeData.length) {\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\n                                        _len,\n                                        i;\n                                    // Auto get first field with type is string;\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\n                                            scope.expandingProperty = _keys[i];\n                                            return;\n                                        }\n                                    }\n\n                                    // Auto get first\n                                    if (window.TreeDnD.IsUndefinedOrNull(scope.expandingProperty)) {\n                                        scope.expandingProperty = _keys[0];\n                                    }\n\n                                }\n                            },\n                            getColDefs = function () {\n                                // Auto get Defs except attribute __level__ ....\n                                if (scope.treeData.length) {\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\n                                        _keys = Object.keys(_firstNode),\n                                        i, _len;\n                                    // Auto get first field with type is string;\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\n                                            _col_defs.push(\n                                                {\n                                                    field: _keys[i]\n                                                }\n                                            );\n                                        }\n                                    }\n                                    scope.colDefinitions = _col_defs;\n                                }\n                            },\n                            _fnInitFilter,\n                            _fnInitOrderBy,\n                            _fnGetControl,\n                            _fnInitDrag,\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\n                                if (!angular.isArray(node.__children__)) {\n                                    node.__children__ = [];\n                                }\n\n                                node.__parent_real__ = parent_real;\n                                node.__parent__ = parent;\n                                _len = node.__children__.length;\n\n                                if (window.TreeDnD.IsUndefinedOrNull(node.__expanded__) && _len > 0) {\n                                    node.__expanded__ = level < scope.expandLevel;\n                                }\n\n                                if (_len === 0) {\n                                    _icon = -1;\n                                } else {\n                                    if (node.__expanded__) {\n                                        _icon = 1;\n                                    } else {\n                                        _icon = 0;\n                                    }\n                                }\n                                // Insert item vertically\n                                _index_real = root.length;\n                                node.__index__ = index;\n                                node.__index_real__ = _index_real;\n                                node.__level__ = level;\n                                node.__icon__ = _icon;\n                                node.__visible__ = !!visible;\n\n                                if (window.TreeDnD.IsUndefinedOrNull(node.__uid__)) {\n                                    node.__uid__ = \"\" + Math.random();\n                                }\n\n                                root.push(node);\n\n                                // Check node children\n                                _dept = 1;\n                                if (_len > 0) {\n                                    for (_i = 0; _i < _len; _i++) {\n                                        _dept += do_f(\n                                            root,\n                                            node.__children__[_i],\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\n                                            _index_real,\n                                            level + 1,\n                                            visible && node.__expanded__,\n                                            _i\n                                        );\n                                    }\n                                }\n\n                                _hashKey = scope.getHash(node);\n\n                                if (window.TreeDnD.IsUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                                    node.__hashKey__ = _hashKey;\n                                    // delete(scope.$globals[_hashKey]);\n                                }\n\n                                node.__dept__ = _dept;\n\n                                return _dept;\n                            },\n                            reload_data = function (oData) {\n                                var _data,\n                                    _len,\n                                    _tree_nodes = [];\n                                \n                                if (window.TreeDnD.IsDefined(oData)) {\n                                    if (!angular.isArray(oData)) {\n                                        return [];\n                                    } else {\n                                        _data = oData;\n                                    }\n                                } else if (!angular.isArray(scope.treeData)) {\n                                    return [];\n                                } else {\n                                    _data = scope.treeData;\n                                }\n\n                                if (!attrs.expandOn) {\n                                    getExpandOn();\n                                }\n\n                                if (!attrs.columnDefs) {\n                                    getColDefs();\n                                }\n\n                                if (window.TreeDnD.IsDefined(scope.orderBy)) {\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                                    }\n\n                                    if (angular.isFunction(_fnInitOrderBy)) {\n                                        _data = _fnInitOrderBy(_data, scope.orderBy);\n                                    }\n                                }\n\n                                if (window.TreeDnD.IsDefined(scope.filter)) {\n                                    if (!angular.isFunction(_fnInitFilter)) {\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                                    }\n\n                                    if (angular.isFunction(_fnInitFilter)) {\n                                        _data = _fnInitFilter(_data, scope.filter, scope.filterOptions);\n                                    }\n                                }\n\n                                _len = _data.length;\n                                if (_len > 0) {\n                                    var _i,\n                                        _offset, _max, _min, _keys,\n                                        _deptTotal = 0;\n\n                                    for (_i = 0; _i < _len; _i++) {\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\n                                    }\n\n                                    // clear Element Empty\n                                    _keys = Object.keys(scope.$globals);\n                                    _len = scope.$globals.length;\n                                    _offset = _len - _deptTotal;\n\n                                    if (_offset !== 0) {\n                                        _max = _len - _offset;\n                                        _min = _max - Math.abs(_offset);\n                                        for (_i = _min; _i < _max; _i++) {\n                                            delete(scope.$globals[_keys[_i]]);\n                                        }\n                                    }\n                                }\n\n                                // clear memory\n                                if (window.TreeDnD.IsDefined(scope.tree_nodes)) {\n                                    delete(scope.tree_nodes);\n                                }\n\n                                scope.tree_nodes = _tree_nodes;\n                                return _tree_nodes;\n                            },\n                            _defaultFilterOption = {\n                                showParent: true,\n                                showChild:  false,\n                                beginAnd:   true\n                            },\n                            tree,\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\n                                if (window.TreeDnD.IsUndefinedOrNull(existAttr)) {\n                                    return false;\n                                }\n\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                                    return true;\n                                }\n\n                                if (angular.isArray(existAttr)) {\n                                    return for_each_attrs(attrs, existAttr, isAnd);\n                                }\n                            },\n                            for_each_attrs = function (attrs, exist, isAnd) {\n                                var i, len = exist.length, passed = false;\n\n                                if (len === 0) {\n                                    return null;\n                                }\n                                for (i = 0; i < len; i++) {\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                                        passed = true;\n                                        if (!isAnd) {\n                                            return true;\n                                        }\n                                    } else {\n                                        if (isAnd) {\n                                            return false;\n                                        }\n                                    }\n                                }\n\n                                return passed;\n                            },\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\n                                nameScope = nameScope || nameAttr;\n                                if (typeof type === 'string' || angular.isArray(type)) {\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\n                                        return;//jmp\n                                    }\n                                    if (typeof tAttrs[nameAttr] === 'string') {\n                                        scope.$watch(\n                                            tAttrs[nameAttr], function (val, old, scope) {\n                                                if ((typeof type === 'string' && typeof val === type) ||\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\n                                                ) {\n                                                    scope[nameScope] = val;\n                                                } else {\n                                                    if (angular.isFunction(valDefault)) {\n                                                        scope[nameScope] = valDefault(val);\n                                                    } else {\n                                                        scope[nameScope] = valDefault;\n                                                    }\n                                                }\n\n                                                if (angular.isFunction(fnAfter)) {\n                                                    fnAfter(scope[nameScope], scope);\n                                                }\n                                            }, true\n                                        );\n                                    } else {\n\n                                        if (angular.isFunction(fnNotExist)) {\n                                            scope[nameScope] = fnNotExist();\n                                        } else if (!angular.isUndefined(fnNotExist)) {\n                                            scope[nameScope] = fnNotExist;\n                                        }\n                                    }\n                                }\n                            },\n                            _watches = [\n                                [\n                                    'enableDrag', [\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\n                                    ['number', 'dragDelay', 0, null, 0],\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\n                                    [\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\n                                        if (isHotkey) {\n                                            scope.enabledMove = false;\n                                        } else {\n                                            scope.enabledMove = scope.statusMove;\n                                        }\n                                    }]\n                                ]],\n                                [\n                                    ['enableDrag', 'enableStatus'], [\n                                    [\n                                        'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\n                                        function (_url) {\n                                            if (_url && $templateCache.get(_url)) {\n                                                $TreeDnDTemplate.setCopy(_url, scope);\n                                            }\n                                        }],\n                                    [\n                                        'string', 'templateMove', attrs.templateMove, 'templateMove', null,\n                                        function (_url) {\n                                            if (_url && $templateCache.get(_url)) {\n                                                $TreeDnDTemplate.setMove(_url, scope);\n                                            }\n                                        }]\n                                ]],\n                                [\n                                    [['enableDrag', 'enableDrop']], [\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                                ],\n                                [\n                                    '*', [\n                                    ['boolean', 'horizontal'],\n                                    [\n                                        'callback', 'treeClass', function (val) {\n                                        switch (typeof val) {\n                                            case 'string':\n                                                scope.$tree_class = val;\n                                                break;\n                                            case 'object':\n                                                angular.extend(scope.$class, val);\n                                                scope.$tree_class = scope.$class.tree;\n                                                break;\n                                            default:\n                                                scope.$tree_class = attrs.treeClass;\n                                                break;\n                                        }\n                                    }, 'treeClass', function () {\n                                        scope.$tree_class = scope.$class.tree + ' table';\n                                    }, null, function () {\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\n                                            scope.$tree_class = attrs.treeClass.trim();\n                                            return true;\n                                        }\n                                    }],\n                                    [\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                                        function (expandOn) {\n                                            if (window.TreeDnD.IsUndefinedOrNull(expandOn)) {\n                                                scope.expandingProperty = attrs.expandOn;\n                                            }\n                                        }],\n                                    [\n                                        'object', 'treeControl', window.TreeDnD.IsDefined(scope.tree) ? scope.tree : {},\n                                        'tree', null, function ($tree) {\n\n                                        if (!angular.isFunction(_fnGetControl)) {\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                                        }\n\n                                        if (angular.isFunction(_fnGetControl)) {\n                                            tree = angular.extend(\n                                                $tree,\n                                                _fnGetControl(scope)\n                                            );\n                                        }\n                                    }],\n                                    [\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                                        function (colDefs) {\n                                            if (window.TreeDnD.IsUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                                scope.colDefinitions = getColDefs();\n                                            }\n                                        }],\n                                    [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\n                                    [\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\n                                        var _passed = false;\n                                        if (window.TreeDnD.IsDefined(filters) && !angular.isArray(filters)) {\n                                            var _keysF = Object.keys(filters),\n                                                _lenF = _keysF.length, _iF;\n\n                                            if (_lenF > 0) {\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\n                                                        filters[_keysF[_iF]].length === 0) {\n                                                        continue;\n                                                    }\n                                                    _passed = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n\n                                        scope.enabledFilter = _passed;\n                                        reload_data();\n                                    }],\n                                    [\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                                        _defaultFilterOption, function (option) {\n                                        if (typeof option === \"object\") {\n                                            scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                                        }\n                                    }],\n                                    ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\n                                    ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\n                                    ['number', 'indent', 30, null, 30],\n                                    ['number', 'indentPlus', 20, null, 20],\n                                    [\n                                        'null', 'callbacks',\n                                        function (optCallbacks) {\n                                            angular.forEach(\n                                                optCallbacks, function (value, key) {\n                                                    if (typeof value === \"function\") {\n                                                        if (scope.$callbacks[key]) {\n                                                            scope.$callbacks[key] = value;\n                                                        }\n                                                    }\n                                                }\n                                            );\n                                            return scope.$callbacks;\n                                        },\n                                        '$callbacks'\n                                    ],\n                                    [\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                                        reload_data();\n                                    }],\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\n                                ]]\n                            ],\n                            w, lenW = _watches.length,\n                            i, len,\n                            _curW,\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\n                        for (w = 0; w < lenW; w++) {\n                            // skip if not exist\n                            if (!check_exist_attr(attrs, _watches[w][0], true)) {\n                                continue;\n                            }\n                            _curW = _watches[w][1];\n                            for (i = 0, len = _curW.length; i < len; i++) {\n                                _typeW = _curW[i][0];\n                                _nameW = _curW[i][1];\n                                _defaultW = _curW[i][2];\n                                _scopeW = _curW[i][3];\n                                _NotW = _curW[i][4];\n                                _AfterW = _curW[i][5];\n                                _BeforeW = _curW[i][6];\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n                            }\n                        }\n\n                        if (attrs.treeData) {\n                            scope.$watch(\n                                attrs.treeData, function (val) {\n                                    scope.treeData = val;\n                                }, true\n                            );\n                        }\n\n                        scope.$watch(\n                            'treeData', function (val) {\n                                reload_data(val);\n                            }, true\n                        );\n\n                        scope.reload_data = reload_data;\n\n                        if (attrs.enableDrag) {\n                            _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                            if (angular.isFunction(_fnInitDrag)) {\n                                _fnInitDrag(scope, element, $window, $document);\n                            }\n                        }\n\n                        // apply Template\n                        scope.$safeApply(\n                            function () {\n                                if ($_Template.length > 0) {\n                                    element.append($compile($_Template)(scope));\n                                } else {\n                                    $http.get(\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                                        {cache: $templateCache}\n                                    ).success(\n                                        function (data) {\n                                            element.append($compile(data.trim())(scope));\n                                        }\n                                    );\n                                }\n                            }\n                        );\n                    };\n                }\n            };\n        }]\n).factory(\n    '$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey) {\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n                var tree = [],\n                    rootIds = [],\n                    item = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len = data.length,\n                    i = 0;\n                while (i < len) {\n                    item = data[i++];\n                    _primary = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId = item[parentKey];\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent.__children__) {\n                            parent.__children__.push(item);\n                        } else {\n                            parent.__children__ = [item];\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n                return tree;\n            },\n            tree2tree: function (data, parentKey) {\n                var access_child = function (data) {\n                    var _tree = [];\n                    var _i, _len = data.length, _copy, _child;\n                    for (_i = 0; _i < _len; _i++) {\n                        _copy = angular.copy(data[_i]);\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\n                            _child = access_child(_copy[parentKey]);\n                            delete(_copy[parentKey]);\n                            _copy.__children__ = _child;\n                        }\n                        _tree.push(_copy);\n                    }\n                    return _tree;\n                };\n\n                return access_child(data);\n            }\n        }\n\n        return _$initConvert;\n    }\n).factory(\n    '$TreeDnDHelper', [\n        '$document', '$window', function ($document, $window) {\n            var _$helper = {\n                nodrag:          function (targetElm) {\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\n                },\n                eventObj:        function (e) {\n                    var obj = e;\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n                    return obj;\n                },\n                dragInfo:        function (scope) {\n                    var _node = scope.getData(),\n                        _tree = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n                height:          function (element) {\n                    return element.prop('scrollHeight');\n                },\n                width:           function (element) {\n                    return element.prop('scrollWidth');\n                },\n                offset:          function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n                positionStarted: function (e, target) {\n                    var pos = {};\n                    pos.offsetX = e.pageX - this.offset(target).left;\n                    pos.offsetY = e.pageY - this.offset(target).top;\n                    pos.startX = pos.lastX = e.pageX;\n                    pos.startY = pos.lastY = e.pageY;\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\n                    return pos;\n                },\n                positionMoved:   function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx = newAx;\n                        pos.moving = true;\n                        return;\n                    }\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n                    pos.dirAx = newAx;\n                },\n                replaceIndent:   function (scope, element, indent, attr) {\n                    attr = attr ? attr : 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                }\n            };\n            return _$helper;\n        }]\n).factory(\n    '$TreeDnDPlugin',['$injector', function ($injector) {\n        var _fnget = function (name) {\n                if (window.TreeDnD.IsDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n                return null;\n            };\n        return _fnget;\n    }]\n).factory(\n    '$TreeDnDTemplate', [\n        '$templateCache', function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes = {},\n                temp,\n                _$init = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n).factory(\n    '$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            var _iF, _lenF, _keysF,\n                _filter,\n                _state,\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                    if (!angular.isFunction(fnBefore)) {\n                        return null;\n                    }\n\n                    var _i, _len, _nodes,\n                        _nodePassed = fnBefore(options, node),\n                        _childPassed = false;\n\n                    if (window.TreeDnD.IsDefined(node[fieldChild])) {\n                        _nodes = node[fieldChild];\n                        _len = _nodes.length;\n                        for (_i = 0; _i < _len; _i++) {\n                            _childPassed = for_all_descendants(\n                                options,\n                                _nodes[_i],\n                                fieldChild,\n                                fnBefore,\n                                fnAfter,\n                                _nodePassed || parentPassed\n                            ) || _childPassed;\n                        }\n                    }\n\n                    if (angular.isFunction(fnAfter)) {\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                    }\n\n                    return _nodePassed || _childPassed;\n                },\n                // Check data by filter\n                _fnCheck = function _fnCheck(callback, check) {\n                    if (window.TreeDnD.IsUndefinedOrNull(check) || angular.isArray(check)) {\n                        return null;\n                    }\n\n                    if (angular.isFunction(callback)) {\n                        return callback(check, $filter);\n                    } else {\n                        if (typeof callback === 'boolean') {\n                            check = !!check;\n                            return check === callback;\n                        } else if (window.TreeDnD.IsDefined(callback)) {\n                            try {\n                                var _regex = new RegExp(callback);\n                                return _regex.test(check);\n                            }\n                            catch (err) {\n                                if (typeof check === 'string') {\n                                    return check.indexOf(callback) > -1;\n                                } else {\n                                    return null;\n                                }\n                            }\n                        } else {\n                            return null;\n                        }\n                    }\n                },\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\n                    if (angular.isArray(condition)) {\n                        return for_each_filter(node, condition, isAnd);\n                    } else {\n                        var _key = condition.field,\n                            _callback = condition.callback,\n                            _iO, _keysO, _lenO;\n\n                        if (_key === '_$') {\n                            _keysO = Object.keys(node);\n                            _lenO = _keysO.length;\n                            for (_iO = 0; _iO < _lenO; _iO++) {\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                    return true;\n                                }\n                            }\n                        } else if (window.TreeDnD.IsDefined(node[_key])) {\n                            return _fnCheck(_callback, node[_key]);\n                        }\n                    }\n                },\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\n                    var i, len = conditions.length, passed = false;\n                    if (len === 0) {\n                        return null;\n                    }\n\n                    for (i = 0; i < len; i++) {\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\n                            passed = true;\n                            // if condition `or` then return;\n                            if (!isAnd) {\n                                return true;\n                            }\n                        } else {\n\n                            // if condition `and` and result in fnProccess = false then return;\n                            if (isAnd) {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return passed;\n                },\n\n                // Will call _fnAfter to clear data no need\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                    if (isNodePassed === true) {\n                        node.__filtered__ = true;\n                        node.__filtered_visible__ = true;\n                        return; //jmp\n                    } else if ((isChildPassed === true && options.showParent === true)\n                               || (isParentPassed === true && options.showChild === true)) {\n                        node.__filtered__ = false;\n                        node.__filtered_visible__ = true;\n                        return; //jmp\n                    }\n\n                    // remove attr __filtered__\n                    delete(node.__filtered__);\n                    delete(node.__filtered_visible__);\n                },\n                _fnBefore = function _fnBefore(options, node) {\n                    if (options.filter.length === 0) {\n                        return true;\n                    } else {\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\n                    }\n                },\n                _fnConvert = function _fnConvert(filters) {\n                    // convert filter object to array filter\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\n                        _keysF = Object.keys(filters);\n                        _lenF = _keysF.length;\n                        _filter = [];\n\n                        if (_lenF > 0) {\n                            for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\n                                    continue;\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                    _state = filters[_keysF[_iF]];\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\n                                } else {\n                                    _state = {\n                                        field:    _keysF[_iF],\n                                        callback: filters[_keysF[_iF]]\n                                    };\n                                }\n                                _filter.push(_state);\n                            }\n                        }\n                        _state = null;\n                        return _filter;\n                    }\n                    else {\n                        return filters;\n                    }\n                },\n                _fnMain = function _fnMain(treeData, filters, _options) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(filters) || angular.isObject(filters))\n                        || filters.length === 0) {\n                        return treeData;\n                    }\n\n                    var _i, _len,\n                        _filter;\n\n                    _filter = _fnConvert(filters);\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                        || _filter.length === 0) {\n                        return treeData;\n                    }\n                    _options.filter = _filter;\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            _options,\n                            treeData[_i],\n                            '__children__',\n                            _fnBefore, _fnAfter\n                        );\n                    }\n\n                    return treeData;\n                };\n\n            return _fnMain;\n        }]\n).factory(\n    '$TreeDnDOrderBy', [\n        '$filter', function ($filter) {\n            var _fnOrderBy = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (window.TreeDnD.IsDefined(node[name])) {\n                        _nodes = node[name];\n                        _len = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n                    return node;\n                },\n                _fnOrder = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\n                        return treeData;\n                    }\n\n                    var _i, _len,\n                        _iF, _lenF, _keysF;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    treeData = _fnOrder(treeData, orderBy);\n                    return treeData;\n                };\n\n            return _fnMain;\n        }]\n).factory(\n    '$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n            var _offset,\n                _fnPlaceHolder = function (e, $params) {\n                    if ($params.placeElm) {\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                        ) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n                _fnDragStart = function (e, $params) {\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                        // disable right click\n                        return;\n                    }\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\n                        return;\n                    }\n                    // the element which is clicked.\n                    var eventElm = angular.element(e.target),\n                        eventScope = eventElm.scope();\n                    if (!eventScope || !eventScope.$type) {\n                        return;\n                    }\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                    //     return;\n                    // }\n\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                        return;\n                    }\n\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                        dragScope,\n                        _$scope = $params.$scope;\n                    if (eventElmTagName === 'input'\n                        || eventElmTagName === 'textarea'\n                        || eventElmTagName === 'button'\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                        return;\n                    }\n                    // check if it or it's parents has a 'data-nodrag' attribute\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                            return;\n                        }\n                        eventElm = eventElm.parent();\n                    }\n\n                    e.uiTreeDragging = true; // stop event bubbling\n                    if (e.originalEvent) {\n                        e.originalEvent.uiTreeDragging = true;\n                    }\n                    e.preventDefault();\n\n                    dragScope = eventScope.getScopeNode();\n\n                    $params.firstMoving = true;\n\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\n                        return;\n                    }\n\n                    var eventObj = $TreeDnDHelper.eventObj(e),\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\n                        isTable = (tagName === 'tr');\n\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\n\n                    _$scope.setDragging($params.dragInfo);\n\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                    if (isTable) {\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                            .addClass(_$scope.$class.tree)\n                            .addClass(_$scope.$class.drag)\n                            .addClass(_$scope.$tree_class);\n                    } else {\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                            .addClass(_$scope.$class.drag)\n                            .addClass('tree-dnd-nodes')\n                            .addClass(_$scope.$tree_class);\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                            'z-index': 9995\n                        }\n                    );\n\n                    $params.offsetEdge = 0;\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\n                        _scope = dragScope,\n                        _element = _scope.$element,\n                        _clone = null,\n                        _needCollapse = !!_$scope.enabledCollapse,\n                        _copied = false,\n                        _tbody = null;\n\n                    if (isTable) {\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\n\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node) {\n                                _scope = _$scope.getScope(_node);\n                                _element = _scope.$element;\n\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _tbody.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n                                }\n\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\n                                    _element.addClass(_$scope.$class.hidden);\n                                }\n                            }\n                        );\n\n                        $params.dragElm.append(_tbody);\n                    } else {\n\n                        if (!_needCollapse) {\n                            _clone = _element.clone();\n                        } else {\n                            var _holder = _scope.getElementChilds(),\n                                _swaper = angular.element(\"<swaped />\");\n\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\n                            _holder.after(angular.element(\"<holder />\"));\n                            _swaper.append(_holder);\n\n                            // Clone without Children & remove tag `<holder>`\n                            _clone = _element.clone();\n                            _clone.find(\"holder\").remove();\n\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\n                            _element.find(\"holder\").replaceWith(_holder);\n\n                            // Reset & clear all;\n                            _swaper.remove();\n                            _holder = null;\n                        }\n\n                        $params.dragElm.append(_clone);\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\n                            _element.addClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            )       + 'px',\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                        }\n                    );\n                    // moving item with descendant\n                    $params.$document.find('body').append($params.dragElm);\n                    if (_$scope.$callbacks.droppable()) {\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                        if (isTable) {\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                        }\n\n                        $params.placeElm.css('width', _width);\n                    }\n\n                    _$scope.showPlace();\n                    _$scope.targeting = true;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                    $params.document_height = Math.max(\n                        $params.body.scrollHeight,\n                        $params.body.offsetHeight,\n                        $params.html.clientHeight,\n                        $params.html.scrollHeight,\n                        $params.html.offsetHeight\n                    );\n\n                    $params.document_width = Math.max(\n                        $params.body.scrollWidth,\n                        $params.body.offsetWidth,\n                        $params.html.clientWidth,\n                        $params.html.scrollWidth,\n                        $params.html.offsetWidth\n                    );\n                },\n                _fnDragMove = function (e, $params) {\n                    var _$scope = $params.$scope;\n                    if (!$params.dragStarted) {\n                        if (!$params.dragDelaying) {\n                            $params.dragStarted = true;\n                            _$scope.$safeApply(\n                                function () {\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\n                                }\n                            );\n                        }\n                        return;\n                    }\n\n                    if ($params.dragElm) {\n                        e.preventDefault();\n                        if ($params.$window.getSelection) {\n                            $params.$window.getSelection().removeAllRanges();\n                        } else if ($params.$window.document.selection) {\n                            $params.$window.document.selection.empty();\n                        }\n\n                        var eventObj = $TreeDnDHelper.eventObj(e),\n                            leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                            topElmPos = eventObj.pageY - $params.pos.offsetY;\n\n                        //dragElm can't leave the screen on the left\n                        if (leftElmPos < 0) {\n                            leftElmPos = 0;\n                        }\n\n                        //dragElm can't leave the screen on the top\n                        if (topElmPos < 0) {\n                            topElmPos = 0;\n                        }\n\n                        //dragElm can't leave the screen on the bottom\n                        if ((topElmPos + 10) > $params.document_height) {\n                            topElmPos = $params.document_height - 10;\n                        }\n\n                        //dragElm can't leave the screen on the right\n                        if ((leftElmPos + 10) > $params.document_width) {\n                            leftElmPos = $params.document_width - 10;\n                        }\n\n                        $params.dragElm.css(\n                            {\n                                'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                    $params.offsetEdge + 1,\n                                    true,\n                                    true\n                                )       + 'px',\n                                'top':  topElmPos + 'px'\n                            }\n                        );\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.setPositionStatus(e);\n                        }\n\n                        var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                            bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                        // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                        if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                            window.scrollBy(0, 10);\n                        }\n                        // to scroll top if cursor y-position is less than the top position the vertical scroll\n                        if (top_scroll > eventObj.pageY) {\n                            window.scrollBy(0, -10);\n                        }\n\n                        $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                        if ($params.firstMoving) {\n                            $params.firstMoving = false;\n                            return;\n                        }\n                        // check if add it as a child node first\n\n                        var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                            targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                            targetElm,\n                            targetScope,\n                            targetBefore,\n                            targetOffset,\n                            tagName,\n                            isTable,\n                            isChanged = true,\n                            isVeritcal = true,\n                            isEmpty,\n                            isSwapped,\n                            _scope,\n                            _target,\n                            _parent,\n                            _info = $params.dragInfo,\n                            _move = _info.move,\n                            _drag = _info.node,\n                            _drop = _info.drop,\n                            treeScope = _info.target,\n                            fnSwapTree,\n                            isHolder = _fnPlaceHolder(e, $params);\n\n                        if (!isHolder) {\n                            /* when using elementFromPoint() inside an iframe, you have to call\n                             elementFromPoint() twice to make sure IE8 returns the correct value\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\n\n                            targetElm = angular.element(\n                                $params.$window.document.elementFromPoint(\n                                    targetX,\n                                    targetY\n                                )\n                            );\n\n                            targetScope = targetElm.scope();\n                            if (!targetScope) {\n                                return;\n                            }\n\n                            fnSwapTree = function () {\n                                treeScope = targetScope.getScopeTree();\n                                _target = _info.target;\n                                if (_info.target !== treeScope) {\n                                    if (treeScope.$callbacks.droppable()) {\n                                        // Replace by place-holder new\n                                        _target.hidePlace();\n                                        _target.targeting = false;\n                                        treeScope.targeting = true;\n\n                                        _info.target = treeScope;\n                                        $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                        _target = null;\n                                        isSwapped = true;\n                                    } else {\n                                        // Not allowed Drop Item\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            };\n\n                            if (angular.isFunction(targetScope.getScopeNode)) {\n                                targetScope = targetScope.getScopeNode();\n                                if (!fnSwapTree()) {\n                                    return;\n                                }\n                            } else {\n                                if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                    if (targetScope.tree_nodes) {\n                                        if (targetScope.tree_nodes.length === 0) {\n                                            if (!fnSwapTree()) {\n                                                return;\n                                            }\n                                            // Empty\n                                            isEmpty = true;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            }\n                        }\n\n                        if ($params.pos.dirAx && !isSwapped || isHolder) {\n                            isVeritcal = false;\n                            targetScope = _info.scope;\n                        }\n\n                        if (!targetScope.$element && !targetScope) {\n                            return;\n                        }\n\n                        tagName = targetScope.$element.prop('tagName').toLowerCase();\n                        isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\n                        if (isEmpty) {\n                            _move.parent = null;\n                            _move.pos = 0;\n\n                            _drop = null;\n                        } else {\n                            // move vertical\n                            if (isVeritcal) {\n                                targetElm = targetScope.$element; // Get the element of tree-dnd-node\n\n                                targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                                if (targetScope.horizontal && !isTable) {\n                                    targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\n                                } else {\n                                    if (isTable) {\n                                        targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\n                                    } else {\n                                        var _height = $TreeDnDHelper.height(targetElm);\n\n                                        if (targetScope.getElementChilds()) {\n                                            _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                        }\n\n                                        if (eventObj.pageY > targetOffset.top + _height) {\n                                            return;\n                                        }\n\n                                        targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\n                                    }\n                                }\n\n                                if (!angular.isFunction(targetScope.getData)) {\n                                    return;\n                                }\n\n                                _target = targetScope.getData();\n                                _parent = targetScope.getNode(_target.__parent_real__);\n\n                                if (targetBefore) {\n                                    var _prev = targetScope.getPrevSibling(_target);\n\n                                    _move.parent = _parent;\n                                    _move.pos = window.TreeDnD.IsDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                    _drop = _prev;\n                                } else {\n                                    if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                        _move.parent = _target;\n                                        _move.pos = 0;\n\n                                        _drop = null;\n                                    } else {\n                                        _move.parent = _parent;\n                                        _move.pos = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    }\n                                }\n                            } else {\n                                // move horizontal\n                                if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                    $params.pos.distAxX = 0;\n                                    // increase horizontal level if previous sibling exists and is not collapsed\n                                    if ($params.pos.distX > 0) {\n                                        _parent = _drop;\n                                        if (!_parent) {\n                                            if (_move.pos - 1 >= 0) {\n                                                _parent = _move.parent.__children__[_move.pos - 1];\n                                            } else {\n                                                return;\n                                            }\n                                        }\n\n                                        if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                            _parent = treeScope.getPrevSibling(_parent);\n                                        }\n\n                                        if (_parent && _parent.__visible__) {\n                                            var _len = _parent.__children__.length;\n\n                                            _move.parent = _parent;\n                                            _move.pos = _len;\n\n                                            if (_len > 0) {\n                                                _drop = _parent.__children__[_len - 1];\n                                            } else {\n                                                _drop = null;\n                                            }\n                                        } else {\n                                            // Not changed\n                                            return;\n                                        }\n                                    } else if ($params.pos.distX < 0) {\n                                        _target = _move.parent;\n                                        if (_target &&\n                                            (_target.__children__.length === 0 ||\n                                             _target.__children__.length - 1 < _move.pos ||\n                                             (_info.drag === _info.target &&\n                                              _target.__index_real__ === _drag.__parent_real__ &&\n                                              _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\n                                        ) {\n                                            _parent = treeScope.getNode(_target.__parent_real__);\n\n                                            _move.parent = _parent;\n                                            _move.pos = _target.__index__ + 1;\n\n                                            _drop = _target;\n                                        } else {\n                                            // Not changed\n                                            return;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                } else {\n                                    // limited\n                                    return;\n                                }\n                            }\n                        }\n\n                        if (_info.drag === _info.target &&\n                            _move.parent &&\n                            _drag.__parent_real__ === _move.parent.__index_real__ &&\n                            _drag.__index__ === _move.pos\n                        ) {\n                            isChanged = false;\n                        }\n\n                        if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                            _info.move = _move;\n                            _info.drop = _drop;\n                            _info.changed = isChanged;\n                            _info.scope = targetScope;\n\n                            if (isTable) {\n                                $TreeDnDHelper.replaceIndent(\n                                    treeScope,\n                                    $params.placeElm,\n                                    window.TreeDnD.IsUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                                );\n\n                                if (_drop) {\n                                    _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\n\n                                    if (_drop.__index__ < _parent.length - 1) {\n                                        // Find fast\n                                        _drop = _parent[_drop.__index__ + 1];\n                                        _scope = _info.target.getScope(_drop);\n                                        _scope.$element[0].parentNode.insertBefore(\n                                            $params.placeElm[0],\n                                            _scope.$element[0]\n                                        );\n                                    } else {\n                                        _target = _info.target.getLastDescendant(_drop);\n                                        _scope = _info.target.getScope(_target);\n                                        _scope.$element.after($params.placeElm);\n                                    }\n                                } else {\n                                    _scope = _info.target.getScope(_move.parent);\n                                    if (_scope) {\n                                        if (_move.parent) {\n                                            _scope.$element.after($params.placeElm);\n\n                                        } else {\n                                            _scope.getElementChilds().prepend($params.placeElm);\n                                        }\n                                    }\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_drop || _move.parent);\n\n                                if (_drop) {\n                                    _scope.$element.after($params.placeElm);\n                                } else {\n                                    _scope.getElementChilds().prepend($params.placeElm);\n                                }\n                            }\n\n                            treeScope.showPlace();\n\n                            _$scope.$safeApply(\n                                function () {\n                                    _$scope.$callbacks.dragMove(_info);\n                                }\n                            );\n                        }\n\n                    }\n                },\n                _fnDragEnd = function (e, $params) {\n                    e.preventDefault();\n                    if ($params.dragElm) {\n                        var _passed = false,\n                            _$scope = $params.$scope,\n                            _scope = _$scope.getScope($params.dragInfo.node),\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\n                            _isTable = (tagName === 'tr'),\n                            _element = _scope.$element;\n\n                        _$scope.$safeApply(\n                            function () {\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                            }\n                        );\n\n                        // rollback all\n                        if (_isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node) {\n                                    _scope = _$scope.getScope(_node);\n                                    _element = _scope.$element;\n\n                                    if (_scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.removeClass(_$scope.$class.hidden);\n                            }\n                        }\n\n                        $params.dragElm.remove();\n                        $params.dragElm = null;\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.hideStatus();\n                        }\n\n                        var _status = false;\n                        if (_$scope.$$apply) {\n                            _$scope.$safeApply(\n                                function () {\n                                    _status = _$scope.$callbacks.dropped(\n                                        $params.dragInfo,\n                                        _passed,\n                                        _$scope.enabledMove\n                                    );\n                                }\n                            );\n                        } else {\n                            _fnBindDrag($params);\n                        }\n\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                            }\n                        );\n\n                        $params.dragInfo.target.hidePlace();\n                        $params.dragInfo.target.targeting = false;\n\n                        $params.dragInfo = null;\n                        _$scope.$$apply = false;\n                        _$scope.setDragging(null);\n                    }\n\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n                },\n                _fnDragStartEvent = function (e, $params) {\n                    if ($params.$scope.$callbacks.draggable()) {\n                        _fnDragStart(e, $params);\n                    }\n                },\n                _fnBindDrag = function ($params) {\n                    $params.element.bind(\n                        'touchstart mousedown', function (e) {\n                            $params.dragDelaying = true;\n                            $params.dragStarted = false;\n                            _fnDragStartEvent(e, $params);\n                            $params.dragTimer = $timeout(\n                                function () {\n                                    $params.dragDelaying = false;\n                                }, $params.$scope.dragDelay\n                            );\n                        }\n                    );\n                    $params.element.bind(\n                        'touchend touchcancel mouseup', function () {\n                            $timeout.cancel($params.dragTimer);\n                        }\n                    );\n                },\n                _fnKeydownHandler = function (e, $params) {\n                    var _$scope = $params.$scope;\n                    if (e.keyCode === 27) {\n                        if (_$scope.enabledStatus) {\n                            _$scope.hideStatus();\n                        }\n\n                        _$scope.$$apply = false;\n                        _fnDragEnd(e, $params);\n                    } else {\n                        if (_$scope.enabledHotkey && e.shiftKey) {\n                            _$scope.enableMove(true);\n                            if (_$scope.enabledStatus) {\n                                _$scope.refreshStatus();\n                            }\n\n                            if (!$params.dragInfo) {\n                                return;\n                            }\n\n                            var _scope = _$scope.getScope($params.dragInfo.node),\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\n                                _element = _scope.$element;\n\n                            if (tagName === 'tr') {\n                                _$scope.for_all_descendants(\n                                    $params.dragInfo.node, function (_node) {\n                                        _scope = _$scope.getScope(_node);\n                                        _element = _scope.$element;\n\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n                                );\n                            } else {\n                                if (_$scope.$class.hidden) {\n                                    _element.addClass(_$scope.$class.hidden);\n                                }\n                            }\n                        }\n                    }\n                },\n                _fnKeyupHandler = function (e, $params) {\n                    var _$scope = $params.$scope;\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\n                        _$scope.enableMove(false);\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return;\n                        }\n\n                        var _scope = _$scope.getScope($params.dragInfo.node),\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\n                            _element = _scope.$element;\n\n                        if (tagName === 'tr') {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node) {\n\n                                    _scope = _$scope.getScope(_node);\n                                    _element = _scope.$element;\n\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.removeClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n                },\n\n                _$init = function (scope, element, $window, $document) {\n                    var $params = {\n                            hasTouch:        ('ontouchstart' in window),\n                            firstMoving:     null,\n                            dragInfo:        null,\n                            pos:             null,\n                            placeElm:        null,\n                            dragElm:         null,\n                            dragDelaying:    true,\n                            dragStarted:     false,\n                            dragTimer:       null,\n                            body:            document.body,\n                            html:            document.documentElement,\n                            document_height: null,\n                            document_width:  null,\n                            offsetEdge:      null,\n                            $scope:          scope,\n                            $window:         $window,\n                            $document:       $document,\n                            element:         element,\n                            bindDrag:        function () {\n                                _fnBindDrag($params);\n                            },\n                            dragEnd:         function (e) {\n                                _fnDragEnd(e, $params);\n                            },\n                            dragMoveEvent:   function (e) {\n                                _fnDragMove(e, $params)\n                            },\n                            dragEndEvent:    function (e) {\n                                scope.$$apply = true;\n                                _fnDragEnd(e, $params);\n                            },\n                            dragCancelEvent: function (e) {\n                                _fnDragEnd(e, $params);\n                            }\n                        },\n                        keydownHandler = function (e) {\n                            return _fnKeydownHandler(e, $params);\n                        },\n                        keyupHandler = function (e) {\n                            return _fnKeyupHandler(e, $params);\n                        };\n\n                    scope.dragEnd = function (e) {\n                        $params.dragEnd(e);\n                    };\n\n                    $params.bindDrag();\n\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\n                    //unbind handler that retains scope\n                    scope.$on(\n                        '$destroy', function () {\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\n                            if (scope.statusElm) {\n                                scope.statusElm.remove();\n                            }\n\n                            if (scope.placeElm) {\n                                scope.placeElm.remove();\n                            }\n                        }\n                    );\n                };\n\n            return _$init;\n        }\n    ]\n).factory(\n    '$TreeDnDControl', function () {\n        var _target, _parent,\n            i, len,\n            fnSetCollapse = function fnSetCollapse(node) {\n                node.__expanded__ = false;\n            },\n            fnSetExpand = function fnSetExpand(node) {\n                node.__expanded__ = true;\n            },\n\n            _$init = function _$init(scope) {\n                var n, tree = {\n                    selected_node:                     null,\n                    for_all_descendants:               scope.for_all_descendants,\n                    select_node:                       function (node) {\n                        if (!node) {\n                            if (tree.selected_node) {\n                                delete(tree.selected_node.__selected__);\n                            }\n                            tree.selected_node = null;\n                            return null;\n                        }\n\n                        if (node !== tree.selected_node) {\n                            if (tree.selected_node) {\n                                delete(tree.selected_node.__selected__);\n                            }\n                            node.__selected__ = true;\n                            tree.selected_node = node;\n                            tree.expand_all_parents(node);\n                            if (angular.isFunction(tree.on_select)) {\n                                tree.on_select(node);\n                            }\n                        }\n                        return node;\n                    },\n                    deselect_node:                     function () {\n                        _target = null;\n                        if (tree.selected_node) {\n                            delete(tree.selected_node.__selected__);\n                            _target = tree.selected_node;\n                            tree.selected_node = null;\n                        }\n                        return _target;\n                    },\n                    get_parent:                        function (node) {\n                        if (node && node.__parent_real__ !== null) {\n                            return scope.tree_nodes[node.__parent_real__];\n                        }\n                        return null;\n                    },\n                    for_all_ancestors:                 function (child, fn) {\n                        _parent = tree.get_parent(child);\n                        if (_parent) {\n                            if (fn(_parent)) {\n                                return false;\n                            }\n\n                            return tree.for_all_ancestors(_parent, fn);\n                        }\n                        return true;\n                    },\n                    expand_all_parents:                function (child) {\n                        return tree.for_all_ancestors(\n                            child, fnSetExpand\n                        );\n                    },\n                    reload_data:                       function () {\n                        return scope.reload_data();\n                    },\n                    add_node:                          function (parent, new_node, index) {\n                        if (typeof index !== 'number') {\n                            if (parent) {\n                                parent.__children__.push(new_node);\n                                parent.__expanded__ = true;\n                            } else {\n                                scope.treeData.push(new_node);\n                            }\n                        } else {\n                            if (parent) {\n                                parent.__children__.splice(index, 0, new_node);\n                                parent.__expanded__ = true;\n                            } else {\n                                scope.treeData.splice(index, 0, new_node);\n                            }\n                        }\n                        return new_node;\n                    },\n                    add_node_root:                     function (new_node) {\n                        tree.add_node(null, new_node);\n                        return new_node;\n                    },\n                    expand_all:                        function () {\n                        len = scope.treeData.length;\n                        for (i = 0; i < len; i++) {\n                            tree.for_all_descendants(\n                                scope.treeData[i], fnSetExpand\n                            );\n                        }\n                    },\n                    collapse_all:                      function () {\n                        len = scope.treeData.length;\n                        for (i = 0; i < len; i++) {\n                            tree.for_all_descendants(\n                                scope.treeData[i], fnSetCollapse\n                            );\n                        }\n                    },\n                    remove_node:                       function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            if (node.__parent_real__) {\n                                _parent = tree.get_parent(node).__children__;\n                            } else {\n                                _parent = scope.treeData;\n                            }\n\n                            _parent.splice(node.__index__, 1);\n\n                            if (tree.selected_node === node) {\n                                tree.selected_node = null;\n                            }\n                        }\n                    },\n                    expand_node:                       function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            node.__expanded__ = true;\n                            return node;\n                        }\n                    },\n                    collapse_node:                     function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            node.__expanded__ = false;\n                            return node;\n                        }\n                    },\n                    get_selected_node:                 function () {\n                        return tree.selected_node;\n                    },\n                    get_first_node:                    function () {\n                        len = scope.treeData.length;\n                        if (len > 0) {\n                            return scope.treeData[0];\n                        }\n                        return null;\n                    },\n                    get_children:                      function (node) {\n                        return node.__children__;\n                    },\n                    get_siblings:                      function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            _parent = tree.get_parent(node);\n                            if (_parent) {\n                                _target = _parent.__children__;\n                            } else {\n                                _target = scope.treeData;\n                            }\n                            return _target;\n                        }\n                    },\n                    get_next_sibling:                  function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            _target = tree.get_siblings(node);\n                            n = _target.length;\n                            if (node.__index__ < n) {\n                                return _target[node.__index__ + 1];\n                            }\n                        }\n                    },\n                    get_prev_sibling:                  function (node) {\n                        node = node || tree.selected_node;\n                        _target = tree.get_siblings(node);\n                        if (node.__index__ > 0) {\n                            return _target[node.__index__ - 1];\n                        }\n                    },\n                    get_first_child:                   function (node) {\n                        node = node || tree.selected_node;\n                        if (node) {\n                            _target = node.__children__;\n                            if (_target && _target.length > 0) {\n                                return node.__children__[0];\n                            }\n                        }\n                        return null;\n                    },\n                    get_closest_ancestor_next_sibling: function (node) {\n                        node = node || tree.selected_node;\n                        _target = tree.get_next_sibling(node);\n                        if (_target) {\n                            return _target;\n                        }\n\n                        _parent = tree.get_parent(node);\n                        return tree.get_closest_ancestor_next_sibling(_parent);\n                    },\n                    get_next_node:                     function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_first_child(node);\n                            if (_target) {\n                                return _target;\n                            } else {\n                                return tree.get_closest_ancestor_next_sibling(node);\n                            }\n                        }\n                    },\n                    get_prev_node:                     function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_prev_sibling(node);\n                            if (_target) {\n                                return tree.get_last_descendant(_target);\n                            }\n\n                            _parent = tree.get_parent(node);\n                            return _parent;\n                        }\n                    },\n                    get_last_descendant:               scope.getLastDescendant,\n                    select_parent_node:                function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _parent = tree.get_parent(node);\n                            if (_parent) {\n                                return tree.select_node(_parent);\n                            }\n                        }\n                    },\n                    select_first_node:                 function () {\n                        return tree.select_node(tree.get_first_node());\n                    },\n                    select_next_sibling:               function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_next_sibling(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    },\n                    select_prev_sibling:               function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_prev_sibling(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    },\n                    select_next_node:                  function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_next_node(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    },\n                    select_prev_node:                  function (node) {\n                        node = node || tree.selected_node;\n\n                        if (node) {\n                            _target = tree.get_prev_node(node);\n                            if (_target) {\n                                return tree.select_node(_target);\n                            }\n                        }\n                    }\n                };\n                angular.extend(scope.tree, tree);\n                return scope.tree;\n            };\n\n        return _$init;\n    }\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    [\n        '$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            [\"<table ng-class=\\\"$tree_class\\\">\",\n             \"    <thead>\",\n             \"  <tr>\",\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\n             \"        <\\/th>\",\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\n             \"         {{col.displayName || col.field}}\",\n             \"     </th>\",\n             \"    </tr>\",\n             \"    </thead>\",\n             \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\",\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\n             \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\",\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\n             \"              <a data-nodrag>\",\n             \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\",\n             \"                     class=\\\"tree-icon\\\"></i>\",\n             \"              </a>\",\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\n             \"       </td>\",\n             \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\",\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\n             \"            compile=\\\"col.cellTemplate\\\">\",\n             \"            {{node[col.field]}}\",\n             \"       </td>\",\n             \"    </tr>\",\n             \"    </tbody>\",\n             \"</table>\"].join('')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n})(window);"],"sourceRoot":"/source/"}